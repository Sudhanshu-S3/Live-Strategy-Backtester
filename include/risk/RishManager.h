#ifndef RISK_MANAGER_H
#define RISK_MANAGER_H

#include "../core/Portfolio.h"
#include "../data/DataTypes.h"
#include "../event/EventQueue.h"
#include "../core/Performance.h" // Include for VaR calculation

struct RiskThresholds {
    double max_drawdown_pct;
    double daily_var_95_pct;
    // Add other thresholds as needed
};

class RiskManager {
public:
    /**
     * @brief Construct a new Risk Manager object
     * @param events Reference to the master event queue
     * @param portfolio Reference to the portfolio to check equity and positions
     * @param risk_per_trade_pct The percentage of total equity to risk per trade (e.g., 0.01 for 1%)
     * @param thresholds Optional: struct containing risk thresholds for alerting
     */
    RiskManager(EventQueue& events, Portfolio& portfolio, double risk_per_trade_pct, 
                const RiskThresholds& thresholds = {0.20, 0.05}); // Default thresholds

    /**
     * @brief Evaluates a SignalEvent against risk rules and creates an OrderEvent if it passes.
     * @param signal The SignalEvent generated by the Strategy.
     */
    void onSignal(const SignalEvent& signal);

    // New: Monitor real-time risk metrics and trigger alerts
    void monitorRealTimeRisk();

    // New: Getter for risk thresholds
    const RiskThresholds& getRiskThresholds() const { return thresholds_; }

private:
    EventQueue& events_;
    Portfolio& portfolio_;
    double risk_per_trade_pct_;
    RiskThresholds thresholds_;

    // Helper for alerting
    void sendAlert(const std::string& message);
};

#endif // RISK_MANAGER_H