#ifndef DATA_TYPES_H
#define DATA_TYPES_H

#include <string>
#include <chrono>
using namespace std;

// Define the types of events
enum class EventType {
    MARKET,
    SIGNAL,
    ORDER,
    FILL
};

// Represents a single OHLCV data point for a specific symbol and time.
struct Bar {
    string symbol;
    chrono::system_clock::time_point timestamp;
    double open = 0.0;
    double high = 0.0;
    double low = 0.0;
    double close = 0.0;
    long long volume = 0;
};


struct Event {
    EventType type;
    virtual ~Event() = default;
};

// Event pushed to the queue when the DataHandler provides a new Bar
struct MarketEvent : public Event {
    string symbol;
    chrono::system_clock::time_point timestamp;
    MarketEvent() { this->type = EventType::MARKET; }
};

// Event generated by a Strategy object to signal a trade
struct SignalEvent : public Event {
    std::string symbol;
    std::chrono::system_clock::time_point timestamp;
    std::string signal_type; // "LONG", "SHORT", "EXIT"

    SignalEvent(std::string symbol, std::chrono::system_clock::time_point timestamp, std::string signal_type)
        : symbol(std::move(symbol)), timestamp(timestamp), signal_type(std::move(signal_type)) {
        this->type = EventType::SIGNAL;
    }
};

// Event sent to the ExecutionHandler to place an order
struct OrderEvent : public Event {
    string symbol;
    chrono::system_clock::time_point timestamp;
    string order_type;  // e.g., "MKT" (Market), "LMT" (Limit)
    string direction;   // "BUY" or "SELL"
    double quantity;

    OrderEvent(string symbol, chrono::system_clock::time_point timestamp, string order_type, string direction, double quantity)
        : symbol(std::move(symbol)), timestamp(timestamp), order_type(std::move(order_type)), direction(std::move(direction)), quantity(quantity) {
        this->type = EventType::ORDER;
    }
};

// Event received from the ExecutionHandler after an order is filled
struct FillEvent : public Event {
    string symbol;
    chrono::system_clock::time_point timestamp;
    string direction;   // "BUY" or "SELL"
    double quantity;
    double fill_price;
    double commission;

    FillEvent(string symbol, chrono::system_clock::time_point timestamp, string direction, double quantity, double fill_price, double commission)
        : symbol(std::move(symbol)), timestamp(timestamp), direction(std::move(direction)), quantity(quantity), fill_price(fill_price), commission(commission) {
        this->type = EventType::FILL;
    }
};

#endif // DATA_TYPES_H